app.get("/sync", async (req, res) => {
  let totalCreated = 0;

  for (const config of canvasConfigs) {
    console.log(`üîç Syncing from ${config.label}...`);

    try {
      const coursesRes = await fetch(`${config.baseUrl}/api/v1/courses`, {
        headers: { Authorization: `Bearer ${config.token}` },
      });
      const courses = await coursesRes.json();

      for (const course of courses) {
        if (!course.name || !course.id) continue;
        console.log(`üìò Course: ${course.name} (ID: ${course.id})`);

        const assignmentsRes = await fetch(
          `${config.baseUrl}/api/v1/courses/${course.id}/assignments`,
          {
            headers: { Authorization: `Bearer ${config.token}` },
          }
        );
        const assignments = await assignmentsRes.json();

        console.log(`   ‚û§ Found ${assignments.length} assignments`);

        for (const assignment of assignments) {
          console.log(`      üìù ${assignment.name}`);

          const coursePageId = await findCoursePageId(course.name);
          if (!coursePageId) {
            console.log(`         ‚ö†Ô∏è No matching Notion course page for "${course.name}"`);
          }

          try {
            await notion.pages.create({
              parent: { database_id: NOTION_DB_ID },
              properties: {
                Name: {
                  title: [{ text: { content: assignment.name } }],
                },
                Due: assignment.due_at
                  ? { date: { start: assignment.due_at } }
                  : undefined,
                Type: {
                  select: { name: detectTypeFromName(assignment.name) },
                },
                "Chapter/Module": {
                  rich_text: [
                    { text: { content: detectModule(assignment.name) } },
                  ],
                },
                Status: {
                  select: { name: assignment.workflow_state || "unknown" },
                },
                ...(coursePageId && {
                  Course: {
                    relation: [{ id: coursePageId }],
                  },
                }),
              },
            });

            totalCreated++;
            console.log(`         ‚úÖ Synced "${assignment.name}"`);
          } catch (createErr) {
            console.error(`         ‚ùå Failed to create Notion page: ${createErr.message}`);
          }
        }
      }
    } catch (err) {
      console.error(`‚ùå Error syncing ${config.label}:`, err.message);
    }
  }

  res.send(`‚úÖ Synced ${totalCreated} assignments to Notion!`);
});